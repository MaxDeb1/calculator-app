@import
  'base/typography';

@import
  'themes/themes';


  *, 
  ::before, 
  ::after {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
  }
  
  body {
      width: 100vw;
      height: 100vh;
      display: table-cell;
      vertical-align: middle;
      font-family: 'Spartan', sans-serif;
      background: var(--MainBg);
  }
  
  .container {
      width: 540px;
      height: 740px;
      margin: 0 auto;
  }
  
  .top {
      display: flex;
      align-items: center;
      justify-content: space-between;
      color: var(--Display);
      margin-bottom: 32px;
  
      p {
          font-size: 1.9em;
      }
  }
  
  .theme__number {
      height: 24px;
      width: 72px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 3px 6px;
      font-size: 0.75em;
      color: var(--Display);
  }
  
  .theme__selector {
      height: 24px;
      width: 72px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 6px;
      background-color: var(--ToggleKeypadBg);
      border-radius: 34px;
  }
  
  .purpose {
    position: absolute;
    color: var(--Display);
    font-size: 0.75em;
    transform: translateX(-80px);
  }
  
  .themes__switch {
    width: 16px;
    height: 16px;
  }
  
  input, label {
      position: absolute;
      cursor: pointer;
  }
  
  input[type=radio] {
      opacity: 0;
  }
  
  label {
      height: 16px;
      width: 16px;
      border-radius: 50%;
      background-color: var(--EqualKeyBg);
      visibility: hidden;
  }
  
  input[type="radio"]:checked+label {
      visibility: visible;
  }
  
  .display {
      width: 540px;
      height: 130px;
      margin-bottom: 25px;
      padding-right: 35px;
      border-radius: 10px;
      background-color: var(--ToggleKeypadBg);
      color: var(--Display);
      line-height: 130px;
      font-size: 2.8rem;
    
        span {
          float: right;
        }
  }
  
  .keypad {
      display: grid;
      align-items: center;
      justify-content: center;
      padding: 32px;
      grid-template-columns: repeat(4, 100px);
      grid-template-rows: repeat(5, 60px);
      gap: 28px;
      width: 540px;
      height: 480px;
      font-size: $numbers;
      background-color: var(--ToggleKeypadBg); 
      border-radius: 10px;
      grid-template-areas: 
          "seven eight nine del"
          "four five six plus"
          "one two three minus"
          "decimal zero divide times"
          "reset reset equal equal"
      ;
  }
  
  $grid-areas: (
      seven: seven,
      eight: eight,
      nine: nine,
      del: del,
      four: four,
      one: one,
      two: two,
      three: three,
      minus: minus,
      decimal: decimal,
      zero: zero,
      divide: divide,
      times: times,
      reset: reset,
      equal: equal,
  );
  
  @each $key, $grid-area in $grid-areas {
      .#{$key} {
          grid-area: $grid-area;
      }
  }
  
  .key {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
      border-radius: 10px;
      cursor: pointer;
      background-color: var(--KeyBg);
      color: var(--Key);
      -webkit-box-shadow: 0px 4px 0px 0px var(--KeyShadow);
              box-shadow: 0px 4px 0px 0px var(--KeyShadow);

      &.del,
      &.reset {
          background-color: var(--ACKeyBg);
          font-size: 0.6em;
          color: $White; 
          -webkit-box-shadow: 0px 4px 0px 0px var(--ACKeyShadow);
                  box-shadow: 0px 4px 0px 0px var(--ACKeyShadow);
      }
  
      &.equal {
          background-color: var(--EqualKeyBg);
          font-size: 0.6em;
          color: var(--EqualKey);
          -webkit-box-shadow: 0px 4px 0px 0px var(--EqualKeyShadow);
                  box-shadow: 0px 4px 0px 0px var(--EqualKeyShadow);
      }
  
      &:active {
          transform: translateY(4px);
          -webkit-box-shadow: 0px 0px 0px 0px;
                  box-shadow: 0px 0px 0px 0px;
      }
  }
  
  
  .attribution { 
      font-size: 11px; 
      text-align: center; 
  }
  
  .attribution a { 
      color: var(--Display); 
  }
  